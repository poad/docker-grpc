name: Docker build and push (release)
 
on:
  release:

  workflow_dispatch:

jobs:
  latest_versions:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      protobuf_version: ${{ steps.protobuf.outputs.version }}
      compose_version: ${{ steps.compose.outputs.version }}
      llvm_version: ${{ steps.llvm.outputs.version }}
    steps:
    - name: prepare
      run: |
        sudo apt-get update -qq && \
        sudo apt-get install --no-install-recommends -qqy \
          jq
    - name: find latest vrersions (protocol buffers)
      id: protobuf
      run: |
        PROTOCOL_BUFFERS_VERSION="$(curl -sSL https://api.github.com/repos/protocolbuffers/protobuf/releases/latest | jq -r .tag_name | cut -d'v' -f2)" && \
        echo "::set-output name=version::${PROTOCOL_BUFFERS_VERSION}"
    - name: find latest vrersions (docker compose)
      id: compose
      run: |
        COMPOSE_VERSION="$(curl -sSL https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)" && \
        echo "::set-output name=version::${COMPOSE_VERSION}"
    - name: find latest vrersions (llvm)
      id: llvm
      run: |
        LLVM_VERSION="$(curl -sSL https://api.github.com/repos/llvm/llvm-project/releases/latest | jq -r .tag_name | cut -d'-' -f2)" && \
        echo "::set-output name=version::${LLVM_VERSION}"

  docker_build_push:
    needs: latest_versions
    strategy:
      matrix:
        versions: [
          { tag: 'debian-buster', target: 'default', java-version: '11', platforms: 'linux/amd64' },
          { tag: 'compose', target: 'compose', java-version: '11', platforms: 'linux/amd64' },
          { tag: 'debian-buster-java11', target: 'default', java-version: '11', platforms: 'linux/amd64' },
          { tag: 'compose-java11', target: 'compose', java-version: '11', platforms: 'linux/amd64' },
          { tag: 'debian-buster-java17', target: 'default', java-version: '17', platforms: 'linux/arm64,linux/amd64' },
          { tag: 'compose-java17', target: 'compose', java-version: '17', platforms: 'linux/arm64,linux/amd64' }
        ]
    runs-on: ubuntu-latest
    steps:
    - name: prepare env
      env:
        PROTOCOL_BUFFERS_VERSION: ${{needs.latest_versions.outputs.protobuf_version}}
        COMPOSE_VERSION: ${{needs.latest_versions.outputs.compose_version}}
        LLVM_VERSION: ${{needs.latest_versions.outputs.llvm_version}}
        JAVA_VERSION: ${{ matrix.versions.java-version }}
      run: |
          echo "LLVM_VERSION=$(echo ${LLVM_VERSION} | cut -d . -f1)" >> $GITHUB_ENV
          echo "PROTOCOL_BUFFERS_VERSION=${PROTOCOL_BUFFERS_VERSION}" >> $GITHUB_ENV
          echo "COMPOSE_VERSION=${COMPOSE_VERSION}" >> $GITHUB_ENV
          echo "JAVA_VERSION=${JAVA_VERSION}" >> $GITHUB_ENV

    - uses: actions/checkout@master

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        install: true

    - uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: poad
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: "Build and push ${{ matrix.versions.tag }}"
      uses: docker/build-push-action@v2
      with:
        push: true
        pull: true
        context: ${{ matrix.versions.dir }}
        platforms: ${{ matrix.versions.platforms }}
        tags: poad/docker-grpc:${{ matrix.versions.tag }}
        target: ${{ matrix.versions.target }}
        file: Dockerfile.release
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          LLVM_VERSION=${{ env.LLVM_VERSION }}
          PROTOCOL_BUFFERS_VERSION=${{ env.PROTOCOL_BUFFERS_VERSION }}
          COMPOSE_VERSION=${{ env.COMPOSE_VERSION }}
          JAVA_VERSION=${{ env.JAVA_VERSION }}
