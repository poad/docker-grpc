ARG COMPOSE_VERSION="2.5.1"

ARG JAVA_VERSION=11

ARG OTP_MAJOR_VERSION=24.3

# https://github.com/erlang/otp/releases
ARG OTP_VERSION="${OTP_MAJOR_VERSION}.4"
ARG OTP_DOWNLOAD_URL="https://github.com/erlang/otp/releases/download/OTP-${OTP_VERSION}/otp_src_${OTP_VERSION}.tar.gz"
# by manual in docker `curl -sSLo ${OTP_VERSION}.tar.gz https://github.com/erlang/otp/releases/download/OTP-${OTP_VERSION}/otp_src_${OTP_VERSION}.tar.gz && sha256sum ${OTP_VERSION}.tar.gz`
ARG OTP_DOWNLOAD_SHA256="2d7678c9bc6fcf3a1242c4d1c3864855d85e73ade792cd80adb8a9f379996711"

# https://github.com/elixir-lang/elixir/releases
ARG ELIXIR_VERSION="v1.13.4"
ARG ELIXIR_DOWNLOAD_URL="https://github.com/elixir-lang/elixir/archive/${ELIXIR_VERSION}.tar.gz"
# by manual in docker `curl -sSLo ${ELIXIR_VERSION}.tar.gz https://github.com/elixir-lang/elixir/archive/${ELIXIR_VERSION}.tar.gz && sha512sum ${ELIXIR_VERSION}.tar.gz`
ARG ELIXIR_DOWNLOAD_SHA512="cd3a28cd227bf60f09500563b7ad4700b2688e0361f975268d5fa81b530aee80ed4f8640335bf08a8c544a2f5d79dbf96c97f281bd3bf4582466a73a9d2edbec"

ARG BASE=erlang:${OTP_MAJOR_VERSION}

ARG LLVM_VERSION=14

FROM buildpack-deps:stable-curl AS download


ARG OTP_DOWNLOAD_URL
ARG OTP_DOWNLOAD_SHA256

ARG ELIXIR_VERSION
ARG ELIXIR_DOWNLOAD_URL
ARG ELIXIR_DOWNLOAD_SHA512

WORKDIR /tmp

RUN curl -sSLo /tmp/corretto.key https://apt.corretto.aws/corretto.key \
 && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > /tmp/rustup-init.sh \
 && curl -fsSL -o elixir-src.tar.gz "${ELIXIR_DOWNLOAD_URL}" \
 && echo "${ELIXIR_DOWNLOAD_SHA512}  elixir-src.tar.gz" | sha512sum -c - \
 && mkdir -p /usr/local/src/elixir \
 && tar -xzC /usr/local/src/elixir --strip-components=1 -f elixir-src.tar.gz \
 && rm elixir-src.tar.gz \
 && curl -fSL -o /tmp/otp-src.tar.gz "${OTP_DOWNLOAD_URL}" \
 && echo "${OTP_DOWNLOAD_SHA256}  /tmp/otp-src.tar.gz" | sha256sum -c - \
 && curl -fsSL https://download.docker.com/linux/debian/gpg -o /tmp/docker-archive-keyring.gpg.key \
 && curl -sSLo /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py \
 && curl -sSLo /tmp/llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key


FROM debian:buster-slim AS base

ENV LANG=C.UTF-8

ARG LLVM_VERSION

ARG JAVA_VERSION

COPY --from=download /tmp/docker-archive-keyring.gpg.key /tmp/docker-archive-keyring.gpg.key
COPY --from=download /tmp/corretto.key /tmp/corretto.key
COPY --from=download /tmp/llvm-snapshot.gpg.key /tmp/llvm-snapshot.gpg.key 

WORKDIR /tmp

ARG buildDeps=' \
  autoconf \
  apt-transport-https \
  ca-certificates \
  curl \
  dpkg-dev \
  gcc \
  gnupg \
  g++ \
  make \
  libncurses-dev \
  lsb-release \
  unixodbc-dev \
  libssl-dev \
  libsctp-dev'

RUN mkdir -p /usr/share/man/man1/ \
 && apt-get update -qq \
 && apt-get install --no-install-recommends -qqy lsb-release ca-certificates gnupg2 binutils apt-utils \
 && cat /tmp/corretto.key | apt-key add - \
 && cat /tmp/docker-archive-keyring.gpg.key | apt-key add - \
 && cat /tmp/llvm-snapshot.gpg.key | apt-key add - \
 && rm -rf /tmp/corretto.key /tmp/docker-archive-keyring.gpg.key /tmp/llvm-snapshot.gpg.key \
 && echo "deb https://apt.corretto.aws stable main" > /etc/apt/sources.list.d/aws-corretto.list \
 && echo "deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/debian $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list \
 && DISTRIBUTION=$(cat /etc/os-release | grep ^ID= | cut -d "=" -f2) \
 && echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-${LLVM_VERSION} main" >> /etc/apt/sources.list.d/llvm-toolchain.list  \
 && apt-get update -qq \
 && apt-get install -qqy --no-install-recommends \
    automake \
    libtool \
    docker-ce \
    docker-ce-cli \
    containerd.io \
    libreadline-dev \
    libsqlite3-dev \
    libssl-dev \
    unzip \
    zlib1g-dev \
    pkg-config \
    unzip \
    git \
    cmake \
    golang \
    libpq-dev \
    libodbc1 \
    libssl1.1 \
    libsctp1 \
    curl \
    python3 \
    python3-dev \
    ${buildDeps} \
    java-${JAVA_VERSION}-amazon-corretto-jdk \
    clang \
    lld \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/* 

COPY --from=download /tmp/get-pip.py /tmp/get-pip.py

RUN cat /tmp/get-pip.py | python3 \
  && rm -rf /var/lib/apt/lists/* /var/log/apt/* /var/log/alternatives.log /var/log/dpkg.log /var/log/faillog /var/log/lastlog /tmp/get-pip.py

COPY --from=download /tmp/rustup-init.sh /tmp/rustup-init.sh
RUN chmod +x /tmp/rustup-init.sh \
 && /tmp/rustup-init.sh -y \
 && rm -rf /var/lib/apt/lists/* /tmp/rustup-init.sh

ARG OTP_VERSION

COPY --from=download /tmp/otp-src.tar.gz /tmp/otp-src.tar.gz
RUN export ERL_TOP=/usr/src/otp_src_"${OTP_VERSION%%@*}" \
 && mkdir -vp "${ERL_TOP}" \
 && tar -xzf /tmp/otp-src.tar.gz -C "${ERL_TOP}" --strip-components=1 \
 && rm otp-src.tar.gz \
 && ( cd "${ERL_TOP}" \
    && ./otp_build autoconf \
    && gnuArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)" \
    && ./configure --build="$gnuArch" \
    && make -j$(nproc) \
    && make install ) \
 && find /usr/local -name examples | xargs rm -rf \
 && rm -rf "${ERL_TOP}" /var/lib/apt/lists/* 

ENV PATH="/github/home/.mix/escripts:/root/.mix/escripts:${PATH}"

COPY --from=download /usr/local/src/elixir /usr/local/src/elixir
WORKDIR /usr/local/src/elixir
RUN make install clean \
  && rm -rf /var/lib/apt/lists/* /usr/local/src/elixir /tmp/*

ENV PATH="/root/.cargo/bin/:/github/home/.mix/escripts:/root/.mix/escripts:${PATH}"
RUN cargo install protobuf-codegen grpcio-compiler grpc-compiler
