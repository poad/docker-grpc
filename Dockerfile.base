ARG DISTORIBUTION=debian
ARG DEBIAN_CODE_NAME=bullseye
ARG FLAVOR="-slim"

ARG COMPOSE_VERSION="2.34.0"

ARG JAVA_VERSION=17

ARG BASE=erlang:${OTP_MAJOR_VERSION}

ARG LLVM_VERSION=20

FROM buildpack-deps:${DEBIAN_CODE_NAME}-curl AS downloader

WORKDIR /tmp

RUN curl -sSLo /tmp/bellsoft.key https://download.bell-sw.com/pki/GPG-KEY-bellsoft \
 && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > /tmp/rustup-init.sh \
 && curl -fsSL https://download.docker.com/linux/debian/gpg -o /tmp/docker-archive-keyring.gpg.key \
 && curl -sSLo /tmp/get-pip.py https://bootstrap.pypa.io/get-pip.py \
 && curl -sSLo /tmp/llvm-snapshot.gpg.key https://apt.llvm.org/llvm-snapshot.gpg.key \
 && curl -fsSL https://deb.nodesource.com/setup_22.x -o /tmp/setup_nodejs.sh

FROM ${DISTORIBUTION}:${DEBIAN_CODE_NAME}${FLAVOR} AS base

ENV DEBIAN_FRONTEND="noninteractive"

ARG DISTORIBUTION
ARG DEBIAN_CODE_NAME

ENV LANG=C.UTF-8

ARG LLVM_VERSION

ARG JAVA_VERSION

COPY --from=downloader /tmp/docker-archive-keyring.gpg.key /tmp/docker-archive-keyring.gpg.key
COPY --from=downloader /tmp/bellsoft.key /tmp/bellsoft.key
COPY --from=downloader /tmp/llvm-snapshot.gpg.key /tmp/llvm-snapshot.gpg.key 
COPY --from=downloader /tmp/setup_nodejs.sh /tmp/setup_nodejs.sh

WORKDIR /tmp

ARG buildDeps=' \
  autoconf \
  apt-transport-https \
  ca-certificates \
  curl \
  dpkg-dev \
  gcc \
  gnupg \
  g++ \
  make \
  libncurses-dev \
  lsb-release \
  unixodbc-dev \
  libssl-dev \
  libsctp-dev'

RUN mkdir -p /usr/share/man/man1/ \
 && apt-get update -qq \
 && apt-get full-upgrade -qqy \
 && apt-get install --no-install-recommends -qqy lsb-release ca-certificates gnupg2 binutils apt-utils \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

RUN cat /tmp/bellsoft.key | apt-key add - \
 && cat /tmp/docker-archive-keyring.gpg.key | apt-key add - \
 && cat /tmp/llvm-snapshot.gpg.key | apt-key add - \
 && rm -rf /tmp/bellsoft.key /tmp/docker-archive-keyring.gpg.key /tmp/llvm-snapshot.gpg.key  /tmp/GPG-KEY-pmanager.asc \
 && echo "deb [arch=$(dpkg --print-architecture)] https://apt.bell-sw.com/ stable main" > /etc/apt/sources.list.d/bell-sw.list \
 && echo "deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/${DISTORIBUTION} $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list \
 && DISTRIBUTION=$(cat /etc/os-release | grep ^ID= | cut -d "=" -f2) \
 && echo "deb http://apt.llvm.org/${DEBIAN_CODE_NAME}/ llvm-toolchain-${DEBIAN_CODE_NAME}-${LLVM_VERSION} main" >> /etc/apt/sources.list.d/llvm-toolchain.list  \
 && chmod +x /tmp/setup_nodejs.sh \
 && /tmp/setup_nodejs.sh \
 && rm -rf /tmp/setup_nodejs.sh

RUN apt-get update -qq \
 && apt-get full-upgrade -qqy \
 && apt-get install -qqy --no-install-recommends \
    automake \
    libtool \
    docker-ce \
    docker-ce-cli \
    containerd.io \
    libreadline-dev \
    libsqlite3-dev \
    libssl-dev \
    unzip \
    zlib1g-dev \
    pkg-config \
    unzip \
    git \
    cmake \
    golang \
    libpq-dev \
    libodbc1 \
    libsctp1 \
    curl \
    python3 \
    python3-dev \
    ${buildDeps} \
    bellsoft-java${JAVA_VERSION}-full \
    clang-${LLVM_VERSION} \
    lld-${LLVM_VERSION} \
    erlang \
    elixir \
    nodejs \
 && apt-get clean

COPY --from=downloader /tmp/get-pip.py /tmp/get-pip.py

RUN cat /tmp/get-pip.py | python3 \
 && rm -rf /var/lib/apt/lists/* /var/log/apt/* /var/log/alternatives.log /var/log/dpkg.log /var/log/faillog /var/log/lastlog /tmp/get-pip.py

ENV RUSTUP_HOME="/usr" \
    CARGO_HOME="/usr"

COPY --from=downloader /tmp/rustup-init.sh /tmp/rustup-init.sh
RUN chmod +x /tmp/rustup-init.sh \
 && /tmp/rustup-init.sh -y \
 && npm install -g @bazel/bazelisk \
 && rm -rf /var/lib/apt/lists/* /tmp/rustup-init.sh

ENV PATH="/home/.mix/escripts:/root/.mix/escripts:${PATH}"
RUN if [ $(dpkg --print-architecture) != "arm64" ]; then cargo install grpc-compiler grpcio-compiler protobuf-codegen; fi
